'''
            rasterOrdenado = ordenar(raster)
            if len(rasterOrdenado) % 2 == 0:
                res = (rasterOrdenado[int(len(rasterOrdenado)/2)-1]+ rasterOrdenado[int(len(rasterOrdenado)/2)]) / 2
                stdout.write(str(int(res))+"\n")
            else:
                stdout.write(str(rasterOrdenado[int(len(rasterOrdenado)/2)])+ "\n")
            '''

            
'''
def ordenar(matrix):
    matrix1d =[]
    if isinstance(matrix[0], list):
        for i in matrix:
            for l in i:
                matrix1d.append(l)
    else:
        matrix1d = matrix

    result = []
    
    while len(matrix1d) >0:
        minVal = matrix1d[0]
        for i in matrix1d:
            if minVal >= i:
                minVal = i

        matrix1d.remove(minVal)
        result.append(minVal)
    return result


:::::::::::::::::::::::
                for s in range(0, len(rasterUni)):
                    buf = rasterUni[s]
                    k = s - 1
                    while k >= 0 and buf < rasterUni[k]:
                        rasterUni[k + 1] = rasterUni[k]
                        k -= 1

                    rasterUni[k+1] = buf

'''
def quick_sort(raster, low = 0, high = None):
    if high is None:
        high = len(raster)
    if (high -low <= 1):
        return 
    #median of three
    pivotArray = []
    pivotArray.append(raster[low])
    pivotArray.append(raster[high-1])
    pivotArray.append(raster[(low+high)//2])
    sorted(pivotArray)   
    pivot = pivotArray[1]
    split = low
    for i in range(low, high-1):
        if (raster[i] < pivot):
            buff = raster[i]
            raster[i] = raster[split]
            raster[split] = buff
            split += 1
    buff = raster[high-1]
    raster[high-1] = raster[split]
    quick_sort(raster, low, split)
    quick_sort(raster, split+1, high)
    return 



     #bubble sort

                for i in range(len(rasterUni)):
                    h = len(rasterUni)-1-i
                    c = 1

                    while c <= h:
                        if rasterUni[c] < rasterUni[c-1]:
                            buffer = rasterUni[c]
                            rasterUni[c] = rasterUni[c-1]
                            rasterUni[c-1] = buffer
                        c += 1

'''
def quicksort(raster, low=0, high=None):
    if high is None:
        high = len(raster)
    while(len(raster) > 30):
        if low < high:
            p = partition(raster, low, high)
            quicksort(raster, low, p)
            quicksort(raster, p + 1, high)


    for i in range(1, len(raster)):
        tmp = raster[i]
        j = i
        while j > 0 and tmp < raster[j-1]:
            raster[j] = raster[j-1]
            j -= 1
        raster[j] = tmp
    return raster

def partition(raster, low, high):
    #median of three
    pivotArray = []
    pivotArray.append(raster[low])
    pivotArray.append(raster[high-1])
    pivotArray.append(raster[(low+high)//2])
    sorted(pivotArray)
    pivot = pivotArray[1]

    for i in range(low, high):
        if raster[i] > pivot:
            high += 1
        else:
            high += 1
            low += 1
            buff = raster[i]
            raster[i] = raster[low-1]
            raster[low-1] = buff
    return low - 1
'''